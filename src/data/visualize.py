"""Fun√ß√µes de visualiza√ß√£o de dados no pr√©-processamento"""
from IPython.display import display
import holidays
from ipywidgets import interact, HTML, Output, Dropdown, VBox
import logging
import matplotlib.pyplot as plt
import numpy as np
from pandas import DataFrame, Series
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import StandardScaler, PowerTransformer
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.seasonal import seasonal_decompose

# inst√¢ncia do objeto logger
logger = logging.getLogger(__name__)
def boxplot_analise_descritiva_categorica(df: pd.DataFrame, distribuicao: list[float], feature: str):
    """
    Exibe um boxplot das features num√©ricas para cada valor selecionado de uma feature categ√≥rica.

    Args:
        df (pd.DataFrame): DataFrame com dados.
        distribuicao (list[float]): Lista de percentis para a an√°lise (n√£o usada diretamente aqui, mas mantida).
        feature (str): Coluna categ√≥rica a ser usada para sele√ß√£o (ex: 'ticker', 'setor', etc.).
    """
    opcoes = sorted(df[feature].dropna().unique())

    @interact(coluna=opcoes)
    def plot(coluna):
        try:
            logger.info(f"Gerando boxplot para {feature} = {coluna}")

            # Filtra os dados com base na sele√ß√£o
            dados_filtrados = df[df[feature] == coluna]
            dados_numericos = dados_filtrados.select_dtypes(include='number')

            if dados_numericos.empty:
                logger.warning(f"Nenhuma coluna num√©rica para {feature} = {coluna}")
                print("Nenhum dado num√©rico dispon√≠vel.")
                return

            # Aplica minmax_scale
            scaler = StandardScaler()
            norm = PowerTransformer(method='yeo-johnson')
            dados_normalizados = pd.DataFrame(scaler.fit_transform(norm.fit_transform(dados_numericos)), 
                columns=dados_numericos.columns)

            # Cria boxplot com as colunas no eixo X
            plt.figure(figsize=(14, 6))
            dados_normalizados.boxplot()
            plt.xticks(rotation=60)
            plt.title(f"An√°lise Descritiva - {feature}: {coluna}")
            plt.ylabel("Valor Normalizado (MinMax)")
            plt.tight_layout()
            plt.show()

        except Exception as e:
            logger.error(f"Erro ao gerar gr√°fico: {e}")
            print("Erro:", e)


def histograma_feature_categorica(df: pd.DataFrame, feature: str):
    """
    Exibe histogramas das colunas num√©ricas para os registros filtrados por uma feature categ√≥rica.

    Args:
        df (pd.DataFrame): DataFrame com os dados.
        feature (str): Coluna categ√≥rica usada para filtrar os dados (ex: 'ticker').
    """
    opcoes = sorted(df[feature].dropna().unique())

    @interact(coluna=opcoes)
    def plot(coluna):
        try:
            logger.info(f"Gerando histograma para {feature} = {coluna}")

            # Filtra os dados
            dados_filtrados = df[df[feature] == coluna]
            dados_numericos = dados_filtrados.select_dtypes(include='number')

            transform_box_cox = PowerTransformer(method='yeo-johnson').fit_transform(dados_numericos)

            if dados_numericos.empty:
                logger.warning(f"Nenhuma coluna num√©rica para {feature} = {coluna}")
                print("Nenhum dado num√©rico dispon√≠vel.")
                return

            # Normaliza com MinMaxScaler
            normalizado = pd.DataFrame(
                StandardScaler().fit_transform(transform_box_cox),
                columns=dados_numericos.columns
            )

            # Define layout dos subplots
            num_colunas = len(normalizado.columns)
            cols = 3  # N√∫mero de colunas de plots por linha
            rows = int(np.ceil(num_colunas / cols))

            fig, axs = plt.subplots(rows, cols, figsize=(5 * cols, 4 * rows))
            axs = axs.flatten()  # Para indexar linearmente

            for i, col in enumerate(normalizado.columns):
                axs[i].hist(normalizado[col], color='steelblue', alpha=0.7)
                axs[i].set_title(col)
                axs[i].set_xlabel('Valor Normalizado')
                axs[i].set_ylabel('Frequ√™ncia')

            # Remove eixos n√£o utilizados
            for j in range(i + 1, len(axs)):
                fig.delaxes(axs[j])

            fig.suptitle(f"Distribui√ß√£o de Features Num√©ricas - {feature}: {coluna}", fontsize=16)
            plt.tight_layout(rect=[0, 0.03, 1, 0.95])
            plt.show()

        except Exception as e:
            logger.error(f"Erro ao gerar gr√°fico: {e}")
            print("Erro:", e)


def grafico_acf(coluna_target:Series, n_lag:int):
    """Fun√ß√£o para gerar o gr√°fico de autocorrela√ß√£o"""
    plot_acf(coluna_target, lags=n_lag, title=f'Autocorrela√ß√£o de {n_lag}lags') 
    return plt.show()


def grafico_pacf(coluna_target:Series, n_lag:int, metodo:str='ywm'):
    """Fun√ß√£o para gerar o gr√°fico de autocorrela√ß√£o parcial."""
    plot_pacf(coluna_target, lags=n_lag, method=metodo)  # m√©todo est√°vel para s√©ries reais
    return plt.show()

def grafico_acf_interativo(df: pd.DataFrame, max_lags: int, coluna_valor: str = 'close'):
    """
    Gera gr√°fico de autocorrela√ß√£o (ACF) para uma s√©rie temporal, interativamente por ticker.

    Args:
        df (pd.DataFrame): DataFrame com colunas 'ticker' e a coluna num√©rica de interesse.
        max_lags (int): N√∫mero m√°ximo de lags para o gr√°fico.
        coluna_valor (str): Nome da coluna num√©rica (ex: 'close', 'trailingPE', etc.).
    """
    tickers = sorted(df['ticker'].dropna().unique())

    dropdown = Dropdown(
        options=tickers,
        description='Ticker:',
        layout={'width': '300px'}
    )

    output = Output()

    def atualizar_acf(change):
        output.clear_output(wait=True)
        ticker = change['new']

        serie = df[df['ticker'] == ticker][coluna_valor].dropna()

        with output:
            if serie.empty:
                print(f"Nenhuma s√©rie dispon√≠vel para {ticker}")
                return

            plt.figure(figsize=(10, 4))
            plot_acf(serie, lags=max_lags)
            plt.title(f'ACF - {coluna_valor} | Ticker: {ticker}')
            plt.tight_layout()
            plt.show()
            plt.close()  # <- fecha a figura para evitar acumula√ß√£o

    dropdown.observe(atualizar_acf, names='value')
    dropdown.value = tickers[0]  # for√ßa exibi√ß√£o inicial

    display(VBox([dropdown, output]))

def grafico_pacf_interativo(df: pd.DataFrame, max_lags: int, coluna_valor: str = 'close', metodo: str = 'ywm'):
    """
    Gera gr√°fico de autocorrela√ß√£o parcial (PACF) interativo por ticker.

    Args:
        df (pd.DataFrame): DataFrame com colunas 'ticker' e a coluna num√©rica.
        max_lags (int): N√∫mero m√°ximo de lags.
        coluna_valor (str): Nome da coluna num√©rica.
        metodo (str): M√©todo do PACF ('ywm' por padr√£o).
    """
    tickers = sorted(df['ticker'].dropna().unique())

    dropdown = Dropdown(
        options=tickers,
        description='Ticker:',
        layout={'width': '300px'}
    )

    output = Output()

    def atualizar_pacf(change):
        output.clear_output(wait=True)
        ticker = change['new']
        serie = df[df['ticker'] == ticker][coluna_valor].dropna()

        with output:
            if serie.empty:
                print(f"Nenhuma s√©rie dispon√≠vel para {ticker}")
                return

            limite = len(serie) // 2
            lags_ajustado = min(max_lags, limite)
            if lags_ajustado < max_lags:
                print(f"[Aten√ß√£o] S√©rie muito curta. Reduzindo lags de {max_lags} para {lags_ajustado}.")

            plt.figure(figsize=(10, 4))
            plot_pacf(serie, lags=lags_ajustado, method=metodo)
            plt.title(f'PACF - {coluna_valor} | Ticker: {ticker}')
            plt.tight_layout()
            plt.show()
            plt.close()

    dropdown.observe(atualizar_pacf, names='value')
    dropdown.value = tickers[0]  # for√ßa execu√ß√£o inicial

    display(VBox([dropdown, output]))

def testar_estacionariedade_interativo(df: DataFrame, coluna_valor: str = 'close'):
    """
    Interface interativa para testar estacionariedade de uma s√©rie temporal por ticker.
    """
    tickers = sorted(df['ticker'].dropna().unique())
    
    # Cria um widget HTML vazio para exibir o resultado
    resultado_html = HTML()

    def analisar(ticker):
        serie = df[df['ticker'] == ticker][coluna_valor]
        resultado = adfuller(serie.dropna())

        # Constr√≥i o texto do resultado como uma string formatada
        resultado_string = f"""
        <p>üîç <strong>Teste ADF - {coluna_valor} | Ticker: {ticker}</strong></p>
        <ul>
            <li>ADF Statistic: {resultado[0]:.4f}</li>
            <li>p-value: {resultado[1]:.4f}</li>
        """
        for k, v in resultado[4].items():
            resultado_string += f"<li>Crit√©rio {k}%: {v:.4f}</li>"
        
        if resultado[1] < 0.05:
            resultado_string += "</ul><p>‚úÖ S√©rie estacion√°ria (rejeita H‚ÇÄ)</p>"
        else:
            resultado_string += "</ul><p>‚ö†Ô∏è S√©rie N√ÉO estacion√°ria (n√£o rejeita H‚ÇÄ)</p>"

        # Atualiza o conte√∫do do widget HTML
        resultado_html.value = resultado_string

    # Exibe o widget interativo e o widget HTML
    interact(analisar, ticker=tickers)
    display(resultado_html)


def grafico_correlacao(corr)
    # transforma os valores em uma matriz booleana para indicar presen√ßa dos dados
    mask =  np.triu(np.ones_like(corr, dtype=bool))
    cmap = sns.diverging_palette(220, 10, as_cmap=True) 
    sns.heatmap(corr, mask=mask, cmap=cmap, annot=True)
    plt.show()
